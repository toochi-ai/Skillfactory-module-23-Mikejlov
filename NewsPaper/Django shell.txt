python manage.py shell
from django.db import models
from django.contrib.auth.models import User
from django.db.models import Sum
from news.models import *
from .resources import POSITIONS

1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).

u1 = User.objects.create(username='User1')
u2 = User.objects.create(username='User2')

2. Создать два объекта модели Author, связанные с пользователями.

Author.objects.create(user=u1)
Author.objects.create(user=u2)

3. Добавить 4 категории в модель Category.

Category.objects.create(name_category='Politics')
Category.objects.create(name_category='Economics')
Category.objects.create(name_category='Sport')
Category.objects.create(name_category='Education')

4. Добавить 2 статьи и 1 новость.
Автор по id
author = Author.objects.get(id=1)
author = Author.objects.get(id=2)

Post.objects.create(author=author  , categoryType= 'AR', title_article_news='The article of the first author ', text_article_news='here is the first text of the first author')
Post.objects.create(author=author  , categoryType= 'AR', title_article_news='The article of the second author ', text_article_news='here is the second text of the first author')
Post.objects.create(author=author  , categoryType= 'NW', title_article_news='The article of the second author ', text_article_news='here is the second text of the second author')
Post.objects.create (author=author  , categoryType= 'AR', title_article_news='The article of the first author ', text_article_news='here is the first text of the first author')

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

Post.objects.get(id=1).category.add(Category.objects.get(id=1))
Post.objects.get(id=1).category.add(Category.objects.get(id=3))
Post.objects.get(id=2).category.add(Category.objects.get(id=4))

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

Comment.objects.create(post=Post.objects.get(id=1), user=Author.objects.get(id=1).user, text_comment='first comment')
Comment.objects.create(post=Post.objects.get(id=1), user=Author.objects.get(id=2).user, text_comment='second comment')
Comment.objects.create(post=Post.objects.get(id=2), user=Author.objects.get(id=1).user, text_comment='third comment')
Comment.objects.create(post=Post.objects.get(id=3), user=Author.objects.get(id=2).user, text_comment='fourth comment')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

Post.objects.get(id=1).like()
Post.objects.get(id=1).like()
Post.objects.get(id=2).like()
Post.objects.get(id=2).dislike()
Post.objects.get(id=1).dislike()

Comment.objects.get(id=1).like()
Comment.objects.get(id=1).dislike()
Comment.objects.get(id=3).dislike()

Comment.objects.get(id=2).rating_comment

8. Обновить рейтинги пользователей.

a1 = Author.objects.get(id=1)
a1.update_rating()

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

a1.rating
a1.post_set.all().values('rating')
a1.user.comment_set.all().values('rating')

a2 = Author.objects.all().order_by('-rating')[:1]
a2
for b in a2:
    b.user.username
    b.rating

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

for j in a3:
     f"Data: {j.time_in.day}"
     f"Rating: {j.rating}"
     j.author.user
     j.title_article_news
     j.preview()

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

bestPostCom = Comment.objects.filter(post=3)
bestPostCom

